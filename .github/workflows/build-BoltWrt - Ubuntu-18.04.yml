#
# Copyrights © 2017 - 2021 Topstalk. All Rights Reserved.
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/Morton-L/AutoMake-OpenWrt-Firmware-Template
# File: .github/workflows/build-BoltWrt.yml
# Description: Build BoltWrt using GitHub Actions
#

name: 使用Ubuntu-18.04编译BoltWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

#环境变量
env:
  Project_URL: https://github.com/Morton-L/BoltWrt
  Project_Branch: main
  CONFIG_FILE: .config
  #Preload_File: preload
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  TimeZone: Asia/Shanghai

#工作,多个jobs并行运行
jobs:
  build:
    #指定服务器系统
    runs-on: ubuntu-18.04

    #动作
    steps:
    #动作名称
    - name: Checkout code
      uses: actions/checkout@main

    #初始化环境变量
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install curl
        sudo -E apt-get -qq install $(curl -fsSL git.io/OpenWrtPrerequisites-Ubuntu_2004)
        sudo timedatectl set-timezone "$TimeZone"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $Project_URL -b $Project_Branch boltwrt
        chmod -Rf 777 boltwrt
        ln -sf /workdir/boltwrt $GITHUB_WORKSPACE/boltwrt

    - name: Update feeds
      run: cd boltwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd boltwrt && chmod -Rf 777 feeds && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files boltwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE boltwrt/.config

    #- name: Load Preload File
      #run: |
        #[ -e $Preload_File ] && mv $Preload_File boltwrt/dl
        #cd boltwrt
        #chmod -Rf 777 dl

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd boltwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd boltwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: BoltWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: boltwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd boltwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: BoltWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
